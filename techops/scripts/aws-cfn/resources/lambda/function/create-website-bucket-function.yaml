Type: AWS::Lambda::Function
Properties:
  Handler: index.handler
  Role:
    Fn::GetAtt:
      - ResourceCustomLambdaFunctionForCFRole
      - Arn
  FunctionName:
    Fn::Join:
      - ''
      - - '_'
        - Ref: ParamDeployEnv
        - Ref: ParamAppIdentifierCaps
        - 'BucketCreationLambdaFunction'
  Timeout: 20
  Runtime: nodejs4.3
  Code:
    ZipFile: |
      var response = require('cfn-response');
      var AWS = require('aws-sdk');
      var s3 = new AWS.S3();
      
      var createBucketIfNotExist = function(event, context){
          var rootDomainName = event.ResourceProperties.rootDomainName;
          var region = event.ResourceProperties.region || 'us-east-1';
          var nakedBucketName = rootDomainName,
              wwwBucketName = 'www.' + nakedBucketName;
          // create bucket if not exist
          
          # http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property
          
          
      };
      
      var deleteBucket = function(event, context){
          var rootDomainName = event.ResourceProperties.rootDomainName;
          var region = event.ResourceProperties.region || 'us-east-1';
          var nakedBucketName = rootDomainName,
              wwwBucketName = 'www.' + nakedBucketName;
          // delete bucket contents if exist
            # http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property 
      };
      
      exports.handler = function(event, context){
        var responseData = {}, requestParams = {};
        requestParams['rootDomainName']
        rootDomainName = event.ResourceProperties.rootDomainName,
        region = event.ResourceProperties.region || 'us-east-1';
        
        
        
        var createBucketIfNotExist = function (event, context, cb) {
            var nakedBucketName = event.ResourceProperties.appNakedDomainName,
                wwwBucketName = event.ResourceProperties.appWWWDomainName;
            var nakedBucketCreationResponse = {
                success: false,     // to see if bucket creation was a success
                complete: false,    // to see bucket creation request is completed - it might be a success or failure
                bucketData: {},
                errorData: {}
            };
            var wwwBucketCreationResponse = {
                success: false,
                complete: false,
                bucketData: {},
                errorData: {}
            };
            var handleResponseCallback = function(){
                var response = {
                    error: false,
                    nakedBucket: {},
                    wwwBucket: {}
                };
                if(nakedBucketCreationResponse.complete && wwwBucketCreationResponse.complete){
                    response.error = nakedBucketCreationResponse.success && wwwBucketCreationResponse.success;  // overall status
                    if(nakedBucketCreationResponse.success){
                        response.nakedBucket.bucketData = nakedBucketCreationResponse.bucketData
                    } else {
                        response.nakedBucket.errorData = nakedBucketCreationResponse.errorData
                    }
                    if(wwwBucketCreationResponse.success){
                        response.nakedBucket.bucketData = wwwBucketCreationResponse.bucketData
                    } else {
                        response.nakedBucket.errorData = wwwBucketCreationResponse.errorData
                    }
                    cb.call(null, response);
                }
            };
            var handleTerminalStatus = function(bucketResponseObj, bucketName, successFlag, successData, errorData, errorMessage){
                bucketResponseObj.complete = true;
                bucketResponseObj.success = successFlag;
                if(successFlag){
                    nakedBucketCreationResponse.bucketData = successData;
                } else {
                    bucketResponseObj.errorData = {
                        bucketName: bucketName,
                        errorMessage: errorMessage,
                        err: errorData
                    };
                }
                handleResponseCallback();
            };
            s3.headBucket({Bucket: nakedBucketName}, function(err, data) {
                if(err && err.statusCode == 403) {    // bucket is created by someone else - so we cannot create it
                    handleTerminalStatus(nakedBucketCreationResponse, nakedBucketName, false, null, err, "Naked Bucket Already in Use by someone else");
                } else if(err && err.statusCode == 404){    // bucket not found - so we can create a new one
                    s3.createBucket({
                        Bucket: nakedBucketName,
                        ACL: 'public-read'
                    }, function(err1, data1){
                        if(err1){
                            handleTerminalStatus(nakedBucketCreationResponse, nakedBucketName, false, null, err, "Error in Naked Bucket Creation");
                        } else {    // bucket creation success - add properties for website
                            s3.putBucketWebsite({
                                Bucket: nakedBucketName,
                                ErrorDocument: {
                                    Key: 'index.html'
                                },
                                IndexDocument: {
                                    Suffix: 'site-error.html'
                                }
                            }, function(err3, data3){
                                if(err3){
                                    handleTerminalStatus(nakedBucketCreationResponse, nakedBucketName, false, null, err, "Error in Naked Bucket Website Configuration");
                                } else {
                                    handleTerminalStatus(nakedBucketCreationResponse, nakedBucketName, true, data3);
                                }
                            });
                        }
                    });
                } else {    // bucket already exists and i can access
                    handleTerminalStatus(nakedBucketCreationResponse, nakedBucketName, true, data);
                }
            });
            s3.headBucket({Bucket: wwwBucketName}, function(err, data) {
                if(err && err.statusCode == 403) {    // bucket is created by someone else - so we cannot create it
                    handleTerminalStatus(wwwBucketCreationResponse, wwwBucketName, false, null, err, "Naked Bucket Already in Use by someone else");
                } else if(err && err.statusCode == 404){    // bucket not found - so we can create a new one
                    s3.createBucket({
                        Bucket: wwwBucketName,
                        ACL: 'public-read'
                    }, function(err1, data1){
                        if(err1){
                            handleTerminalStatus(wwwBucketCreationResponse, wwwBucketName, false, null, err, "Error in Naked Bucket Creation");
                        } else {    // bucket creation success - add properties for website
                            s3.putBucketWebsite({
                                Bucket: nakedBucketName,
                                RedirectAllRequestsTo: {
                                    HostName: 'STRING_VALUE'
                                },
                            }, function(err3, data3){
                                if(err3){
                                    handleTerminalStatus(wwwBucketCreationResponse, wwwBucketName, false, null, err, "Error in Naked Bucket Website Configuration");
                                } else {
                                    handleTerminalStatus(wwwBucketCreationResponse, wwwBucketName, true, data3);
                                }
                            });
                        }
                    });
                } else {    // bucket already exists and i can access
                    handleTerminalStatus(wwwBucketCreationResponse, wwwBucketName, true, data);
                }
            });
        };
    
        http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#createBucket-property
        var deleteBucket = function (event, context) {
            var rootDomainName = event.ResourceProperties.rootDomainName;
            var region = event.ResourceProperties.region || 'us-east-1';
            var nakedBucketName = rootDomainName,
                wwwBucketName = 'www.' + nakedBucketName;
            // delete bucket contents if exist
        }
    
    
        if(event.RequestType == 'Create'){
            // create the bucket if not exist
            createBucketIfNotExist(event, context);
        } else if(event.RequestType == 'Update'){
            // create the bucket if not exist
            createBucketIfNotExist(event, context);
        } else if(event.RequestType == 'Delete'){
            // delete the bucket content
            deleteBucket(event, context);
        }
        
        
      };
      
      
      
      var apigateway = new AWS.APIGateway();
      var decodeBase64 = function(base64str) {
          var decoded = new Buffer(base64str, 'base64').toString('ascii');
          return decoded;
      }
      exports.handler = function(event, context) {
        var responseData = {}, reqParams = {};
        var reqCallback = function(err, data){
            if(err){
                responseData['error'] = 'API Custom Domain Operation Failed OP: ' + event.RequestType;
                console.log('REQUEST FAILED:', event.RequestType, "", JSON.stringify(err));
                response.send(event, context, response.FAILED, responseData);
            } else {
                for (var property in data) {
                  if (data.hasOwnProperty(property)) {
                    responseData[property] = data[property];
                  }
                }
                console.log('REQUEST SUCCESS:', event.RequestType, "", JSON.stringify(data));
                response.send(event, context, response.SUCCESS, responseData);
            }
        };
        var buildCreateReq = function(){
            var reqParams = {}
            reqParams['certificateBody'] = decodeBase64(event.ResourceProperties.certificateBody);
            reqParams['certificateChain'] = decodeBase64(event.ResourceProperties.certificateChain);
            reqParams['certificateName'] = event.ResourceProperties.certificateName;
            reqParams['certificatePrivateKey'] = decodeBase64(event.ResourceProperties.certificatePrivateKey);
            reqParams['domainName'] = event.ResourceProperties.domainName;
            return reqParams;
        };
        var buildDeleteReq = function(){
            var reqParams = {}
            reqParams['domainName'] = event.ResourceProperties.domainName;
            return reqParams;
        };
        console.log('REQUEST RECEIVED:', JSON.stringify(event));
        if(event.RequestType == 'Create'){
            apigateway.createDomainName(buildCreateReq(), reqCallback);
        } else if(event.RequestType == 'Update'){
            console.log('UPDATE Operation makes no iumpact on API Gateway - Manually Delete the stack and recreate after an hour - since cloudfront is involved');
            responseData['error'] = 'UPDATE Operation makes no impact on API Gateway - Manually Delete the stack and recreate after an hour - since cloudfront is involved';
            response.send(event, context, response.FAILED, responseData);
            return;
            // apigateway.deleteDomainName(buildDeleteReq(), function(err, data){
            //     apigateway.createDomainName(buildCreateReq(), reqCallback);
            // });
        } else if(event.RequestType == 'Delete'){
        var reqParam = buildDeleteReq();
            apigateway.getDomainName(reqParam, function(err, data) {
              if((! err) && (data && data.domainName)){
                apigateway.deleteDomainName(reqParam, reqCallback);
              } else {  // assuming the domain name was not there - never created or already rolled back or deleted manually
                response.send(event, context, response.SUCCESS, responseData);
              }
            });
        }
        //response.send(event, context, response.SUCCESS, responseData);
      };